version: '3.8'
services:
  auth-service:
    image: auth-service:latest
    depends_on:
      - nats1
      - nats2
    environment:
      - NATS1_URL=nats://nats1:4222
      - NATS2_URL=nats://nats2:4222
      - SERVER_ADDRESS=:8081
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
    networks:
      - faas-app-network
    healthcheck: # Health check for the service
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  registry-service:
    image: registry-service:latest
    depends_on:
      - nats1
      - nats2
    environment:
      - NATS1_URL=nats://nats1:4222
      - NATS2_URL=nats://nats2:4222
      - SERVER_ADDRESS=:8082
      - BUCKET_NAME=functions
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: unless-stopped
    networks:
      - faas-app-network
    healthcheck: # Health check for the service
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  spawner-service:
    image: spawner-service:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Access to the Docker daemon
    depends_on:
      - nats1
      - nats2
    environment:
      - NATS1_URL=nats://nats1:4222
      - NATS2_URL=nats://nats2:4222
      - MESSAGE_QUEUE=functions.execute
      - MAX_CONTAINERS=100
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: unless-stopped
    networks:
      - faas-app-network

  nats1:
    image: nats:latest
    ports:
      - "4222:4222"  # External port mapped to NATS
      - "8222:8222"  # Enable monitoring on port 8222
    command:
      - "--jetstream"
      - "--store_dir=/data/jetstream"  # Directory for JetStream data
      - "--http_port=8222"  # Enable monitoring on port 8222
      - "--cluster=nats://nats1:6222"  # Cluster address
      - "--cluster_name=faas-cluster"  # Cluster name
      - "--server_name=nats"  # Server name
      - "--routes=nats://nats2:6222"  # Routes to other servers
    volumes:
      - ./nats1-data:/data  # Persistent storage for JetStream
    networks:
      - faas-app-network

  nats2:
    image: nats:latest
    depends_on:
      - nats1
    command:
      - "--jetstream"
      - "--store_dir=/data/jetstream"  # Directory for JetStream data
      - "--cluster=nats://nats2:6222"  # Cluster address
      - "--cluster_name=faas-cluster"  # Cluster name
      - "--server_name=nats2"  # Server name
      - "--routes=nats://nats1:6222"  # Routes to other servers
    volumes:
      - ./nats2-data:/data  # Persistent storage for JetStream
    networks:
      - faas-app-network

  # REMOVE IN PRODUCTION
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - registry-service
    ports:
      - "4000:4000"  # External port mapped to auth-service
      - "5000:5000"  # External port mapped to registry-service
      - "6000:6000" # External port mapped to spawner-service
    networks:
      - faas-app-network

  # For APISIX and Dashboard
  etcd:
    image: bitnami/etcd
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
    ports:
      - "2379:2379"
    volumes:
      - etcd_data:/bitnami/etcd
    networks:
      - faas-app-network

  apisix:
    image: apache/apisix
    depends_on:
      - etcd
    ports:
      - "80:9080"  # HTTP port
      - "9080:9080"  # HTTP port
      - "9443:9443"  # HTTPS port
      - "9180:9180"  # Admin API port
    volumes:
      - ./api-gateway/apisix/conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
      - ./api-gateway/setup.sh:/usr/local/apisix/setup.sh:ro
    environment:
      APISIX_ADMIN_KEY: "edd1c9f034335f136f87ad84b625c8f1"
    networks:
      - faas-app-network

  dashboard:
    image: apache/apisix-dashboard
    ports:
      - "9000:9000"
    depends_on:
      - apisix
    environment:
      - APISIX_DASHBOARD_SSL_ENABLED="false"
    volumes:
      - ./api-gateway/apisix/conf/dashboard_config.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    networks:
      - faas-app-network

volumes:
  etcd_data:

networks:
  faas-app-network:
    driver: overlay
    attachable: true
